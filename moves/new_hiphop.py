# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.00178573, [3, -0.386667, 0], [3, 0.186667, 0]], [0.514872, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.258309, [3, -0.173333, 0], [3, 0.146667, 0]], [0.0122173, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.251327, [3, -0.133333, 0], [3, 0.16, 0]], [0.00698132, [3, -0.16, 0], [3, 0.146667, 0]], [0.00698132, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00698132, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00420227, [3, -0.146667, 0.0111836], [3, 0.146667, -0.0111836]], [-0.165798, [3, -0.146667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.00234838, [3, -0.386667, 0], [3, 0.186667, 0]], [0.00234838, [3, -0.186667, 0], [3, 0.173333, 0]], [-1.53589, [3, -0.173333, 0], [3, 0.146667, 0]], [1.213, [3, -0.146667, 0], [3, 0.133333, 0]], [-1.53589, [3, -0.133333, 0], [3, 0.16, 0]], [1.213, [3, -0.16, 0], [3, 0.146667, 0]], [0.371755, [3, -0.146667, 0], [3, 0.146667, 0]], [0.371755, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00379466, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00379466, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.35, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.35, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.35, [3, -0.173333, 0], [3, 0.28, 0]], [-0.35, [3, -0.28, 0], [3, 0.16, 0]], [-0.35, [3, -0.16, 0], [3, 0.146667, 0]], [-0.35, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.35, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00852256, [3, -0.146667, -0.0733333], [3, 0.146667, 0.0733333]], [0.09, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.0628319, [3, -0.386667, 0], [3, 0.186667, 0]], [0.0628319, [3, -0.186667, 0], [3, 0.173333, 0]], [0.0530144, [3, -0.173333, 0], [3, 0.28, 0]], [0.0531246, [3, -0.28, 0], [3, 0.16, 0]], [0.0531246, [3, -0.16, 0], [3, 0.146667, 0]], [0.0531246, [3, -0.146667, 0], [3, 0.146667, 0]], [0.0531246, [3, -0.146667, 0], [3, 0.146667, 0]], [0, [3, -0.146667, 0.0305208], [3, 0.146667, -0.0305208]], [-0.13, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.745334, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.745334, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.729467, [3, -0.173333, -0.00338802], [3, 0.28, 0.00547296]], [-0.718751, [3, -0.28, 0], [3, 0.16, 0]], [-0.718751, [3, -0.16, 0], [3, 0.146667, 0]], [-0.717819, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.717819, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.0435031, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.417341, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.105107, [3, -0.386667, 0], [3, 0.186667, 0]], [0.105107, [3, -0.186667, 0], [3, 0.173333, 0]], [0.10396, [3, -0.173333, 0], [3, 0.28, 0]], [0.104343, [3, -0.28, 0], [3, 0.16, 0]], [0.104343, [3, -0.16, 0], [3, 0.146667, 0]], [0.115137, [3, -0.146667, 0], [3, 0.146667, 0]], [0.115137, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.000932922, [3, -0.146667, 0.11607], [3, 0.146667, -0.11607]], [-1.19594, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.256499, [3, -0.386667, 0], [3, 0.186667, 0]], [0.256499, [3, -0.186667, 0], [3, 0.173333, 0]], [0.256499, [3, -0.173333, 0], [3, 0.28, 0]], [0.256499, [3, -0.28, 0], [3, 0.16, 0]], [0.256499, [3, -0.16, 0], [3, 0.146667, 0]], [0.256499, [3, -0.146667, 0], [3, 0.146667, 0]], [0.256499, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00608754, [3, -0.146667, 0], [3, 0.146667, 0]], [0.290359, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.424115, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.424115, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.424406, [3, -0.173333, 0], [3, 0.146667, 0]], [0.390954, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.425031, [3, -0.133333, 0], [3, 0.16, 0]], [0.390954, [3, -0.16, 0], [3, 0.146667, 0]], [0.390954, [3, -0.146667, 0], [3, 0.146667, 0]], [0.390954, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.000718725, [3, -0.146667, 0], [3, 0.146667, 0]], [0.13, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.0575959, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.0575959, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.055121, [3, -0.173333, 0], [3, 0.146667, 0]], [-0.228638, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.0555568, [3, -0.133333, 0], [3, 0.16, 0]], [-0.228638, [3, -0.16, 0], [3, 0.146667, 0]], [-0.228638, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.228638, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00922852, [3, -0.146667, -0.0532349], [3, 0.146667, 0.0532349]], [0.0907715, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.659734, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.659734, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.652325, [3, -0.173333, 0], [3, 0.28, 0]], [-0.655814, [3, -0.28, 0], [3, 0.16, 0]], [-0.655814, [3, -0.16, 0], [3, 0.146667, 0]], [-0.655814, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.655814, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00420227, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.165798, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.715585, [3, -0.386667, 0], [3, 0.186667, 0]], [0.715585, [3, -0.186667, 0], [3, 0.173333, 0]], [0.714915, [3, -0.173333, 0.000669652], [3, 0.146667, -0.000566628]], [0.555015, [3, -0.146667, 0], [3, 0.133333, 0]], [0.714242, [3, -0.133333, 0], [3, 0.16, 0]], [0.555015, [3, -0.16, 0], [3, 0.146667, 0]], [0.555015, [3, -0.146667, 0], [3, 0.146667, 0]], [0.555015, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00111802, [3, -0.146667, 0.091118], [3, 0.146667, -0.091118]], [-0.09, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.162434, [3, -0.386667, 0], [3, 0.186667, 0]], [0.162434, [3, -0.186667, 0], [3, 0.173333, 0]], [0.167013, [3, -0.173333, 0], [3, 0.28, 0]], [0.166618, [3, -0.28, 0.000395529], [3, 0.16, -0.000226017]], [-1.15541, [3, -0.16, 0], [3, 0.146667, 0]], [-1.14434, [3, -0.146667, 0], [3, 0.146667, 0]], [-1.14434, [3, -0.146667, 0], [3, 0.146667, 0]], [0.000939633, [3, -0.146667, -0.43535], [3, 0.146667, 0.43535]], [1.46776, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.0952713, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.0952713, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.0581526, [3, -0.173333, -0.00666667], [3, 0.28, 0.0107692]], [-0.0429635, [3, -0.28, 0], [3, 0.16, 0]], [-0.0429635, [3, -0.16, 0], [3, 0.146667, 0]], [-0.0240079, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.0240079, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00974114, [3, -0.146667, -0.0335098], [3, 0.146667, 0.0335098]], [0.177051, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.0277694, [3, -0.386667, 0], [3, 0.186667, 0]], [0.0277694, [3, -0.186667, 0], [3, 0.173333, 0]], [0.0270572, [3, -0.173333, 0.000180219], [3, 0.28, -0.000291123]], [0.0263553, [3, -0.28, 0], [3, 0.16, 0]], [0.0263553, [3, -0.16, 0], [3, 0.146667, 0]], [0.0263553, [3, -0.146667, 0], [3, 0.146667, 0]], [0.0263553, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00525523, [3, -0.146667, 0], [3, 0.146667, 0]], [0.0947448, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.348013, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.348013, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.348013, [3, -0.173333, 0], [3, 0.28, 0]], [-0.348013, [3, -0.28, 0], [3, 0.16, 0]], [-0.329867, [3, -0.16, 0], [3, 0.146667, 0]], [-0.329867, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.329867, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00852256, [3, -0.146667, -0.0699779], [3, 0.146667, 0.0699779]], [0.09, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.00558042, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.00558042, [3, -0.186667, 0], [3, 0.173333, 0]], [0.141372, [3, -0.173333, 0], [3, 0.28, 0]], [0.141372, [3, -0.28, 0], [3, 0.16, 0]], [-0.169297, [3, -0.16, 0], [3, 0.146667, 0]], [-0.169297, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.169297, [3, -0.146667, 0], [3, 0.146667, 0]], [0, [3, -0.146667, -0.0498828], [3, 0.146667, 0.0498828]], [0.13, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[1.53673, [3, -0.386667, 0], [3, 0.186667, 0]], [1.53673, [3, -0.186667, 0], [3, 0.173333, 0]], [1.52825, [3, -0.173333, 0], [3, 0.28, 0]], [1.52863, [3, -0.28, 0], [3, 0.16, 0]], [1.52863, [3, -0.16, 0], [3, 0.146667, 0]], [0.390954, [3, -0.146667, 0], [3, 0.146667, 0]], [0.393827, [3, -0.146667, 0], [3, 0.146667, 0]], [0.0435031, [3, -0.146667, 0], [3, 0.146667, 0]], [0.417341, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.0716553, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.0716553, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.0710624, [3, -0.173333, -0.000592845], [3, 0.28, 0.000957672]], [-0.0666051, [3, -0.28, 0], [3, 0.16, 0]], [-0.0666051, [3, -0.16, 0], [3, 0.146667, 0]], [-0.1212, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.0769817, [3, -0.146667, -0.0203555], [3, 0.146667, 0.0203555]], [0.000932922, [3, -0.146667, -0.0779146], [3, 0.146667, 0.0779146]], [1.19594, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.256494, [3, -0.386667, 0], [3, 0.186667, 0]], [0.256494, [3, -0.186667, 0], [3, 0.173333, 0]], [0.256494, [3, -0.173333, 0], [3, 0.28, 0]], [0.256494, [3, -0.28, 0], [3, 0.16, 0]], [0.69, [3, -0.16, 0], [3, 0.146667, 0]], [0.54, [3, -0.146667, 0], [3, 0.146667, 0]], [0.54, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00608754, [3, -0.146667, 0], [3, 0.146667, 0]], [0.290359, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.452112, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.452112, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.0715585, [3, -0.173333, 0], [3, 0.28, 0]], [-0.0715585, [3, -0.28, 0], [3, 0.16, 0]], [0.020944, [3, -0.16, 0], [3, 0.146667, 0]], [0.020944, [3, -0.146667, 0], [3, 0.146667, 0]], [0.020944, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.000718725, [3, -0.146667, 0], [3, 0.146667, 0]], [0.13, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.00425469, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.00425469, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.00425469, [3, -0.173333, 0], [3, 0.28, 0]], [-0.00425469, [3, -0.28, 0], [3, 0.16, 0]], [-0.500909, [3, -0.16, 0], [3, 0.146667, 0]], [-0.500909, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.500909, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00922852, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.0907715, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.659734, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.652325, [3, -0.173333, 0], [3, 0.28, 0]], [-0.655814, [3, -0.28, 0], [3, 0.16, 0]], [-0.0506145, [3, -0.16, 0], [3, 0.146667, 0]], [-0.655814, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.655814, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.00420227, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.165798, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([1.16, 1.72, 2.24, 2.68, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.7, [3, -0.386667, 0], [3, 0.186667, 0]], [0.7, [3, -0.186667, 0], [3, 0.173333, 0]], [1.86925, [3, -0.173333, 0], [3, 0.146667, 0]], [0.555015, [3, -0.146667, 0], [3, 0.133333, 0]], [1.86925, [3, -0.133333, 0], [3, 0.16, 0]], [0.776672, [3, -0.16, 0], [3, 0.146667, 0]], [0.776672, [3, -0.146667, 0], [3, 0.146667, 0]], [0.776672, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00111802, [3, -0.146667, 0.091118], [3, 0.146667, -0.091118]], [-0.09, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.138439, [3, -0.386667, 0], [3, 0.186667, 0]], [0.138439, [3, -0.186667, 0], [3, 0.173333, 0]], [0.146841, [3, -0.173333, 0], [3, 0.28, 0]], [0.145227, [3, -0.28, 0], [3, 0.16, 0]], [2.08567, [3, -0.16, 0], [3, 0.146667, 0]], [-1.18508, [3, -0.146667, 0.00950589], [3, 0.146667, -0.00950589]], [-1.19458, [3, -0.146667, 0], [3, 0.146667, 0]], [0.000939633, [3, -0.146667, -0.443724], [3, 0.146667, 0.443724]], [1.46776, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[-0.504904, [3, -0.386667, 0], [3, 0.186667, 0]], [-0.504904, [3, -0.186667, 0], [3, 0.173333, 0]], [-0.526257, [3, -0.173333, 0.00271036], [3, 0.28, -0.00437827]], [-0.530635, [3, -0.28, 0], [3, 0.16, 0]], [-0.530635, [3, -0.16, 0], [3, 0.146667, 0]], [-1.32645, [3, -0.146667, 0], [3, 0.146667, 0]], [-1.32366, [3, -0.146667, -0.00279286], [3, 0.146667, 0.00279286]], [-0.00974114, [3, -0.146667, 0], [3, 0.146667, 0]], [-0.177051, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([1.16, 1.72, 2.24, 3.08, 3.56, 4, 4.44, 4.88, 5.32])
keys.append([[0.793417, [3, -0.386667, 0], [3, 0.186667, 0]], [0.793417, [3, -0.186667, 0], [3, 0.173333, 0]], [0.784486, [3, -0.173333, 0], [3, 0.28, 0]], [0.78556, [3, -0.28, 0], [3, 0.16, 0]], [0.78556, [3, -0.16, 0], [3, 0.146667, 0]], [0.78556, [3, -0.146667, 0], [3, 0.146667, 0]], [0.78556, [3, -0.146667, 0], [3, 0.146667, 0]], [0.00525523, [3, -0.146667, 0], [3, 0.146667, 0]], [0.0947448, [3, -0.146667, 0], [3, 0, 0]]])

def main(IP, port):
    
  try:
    # uncomment the following line and modify the IP if you use this script outside Choregraphe.
    motion = ALProxy("ALMotion", IP, port)
    #motion = ALProxy("ALMotion")
    motion.angleInterpolationBezier(names, times, keys)
  except BaseException, err:
    print err
