# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-0.00894525, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.321141, [3, -0.333333, 0], [3, 0.213333, 0]], [0.00538106, [3, -0.213333, 0], [3, 0.306667, 0]], [-0.00269031, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.00269031, [3, -0.146667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-0.986111, [3, -0.333333, 0], [3, 0.333333, 0]], [1.66504, [3, -0.333333, 0], [3, 0.213333, 0]], [-0.000452077, [3, -0.213333, 2.48767e-10], [3, 0.306667, -3.57602e-10]], [-0.000452077, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.000452077, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([1, 2.64, 3.56, 4])
keys.append([[-0.345293, [3, -0.333333, 0], [3, 0.546667, 0]], [0.0834212, [3, -0.546667, 0], [3, 0.306667, 0]], [0.0817416, [3, -0.306667, 0.00167958], [3, 0.146667, -0.000803278]], [0.00747987, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[0.00872665, [3, -0.333333, 0], [3, 0.546667, 0]], [0.00872665, [3, -0.546667, 0], [3, 0.186667, 0]], [0.00349066, [3, -0.186667, 0], [3, 0.12, 0]], [0.00349066, [3, -0.12, 0], [3, 0.146667, 0]], [0.00349066, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-1.00754, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.804597, [3, -0.333333, -0.195941], [3, 0.213333, 0.125402]], [-0.0435071, [3, -0.213333, 0], [3, 0.306667, 0]], [-0.045319, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.035184, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-1.38201, [3, -0.333333, 0], [3, 0.333333, 0]], [-2.08567, [3, -0.333333, 0], [3, 0.213333, 0]], [-0.000926357, [3, -0.213333, 0], [3, 0.306667, 0]], [-0.0020516, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.0020516, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[0.25, [3, -0.333333, 0], [3, 0.333333, 0]], [1, [3, -0.333333, 0], [3, 0.213333, 0]], [0.27, [3, -0.213333, 6.21962e-08], [3, 0.306667, -8.9407e-08]], [0.27, [3, -0.306667, 8.9407e-08], [3, 0.146667, -4.27599e-08]], [0.00167235, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[-0.44402, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.286711, [3, -0.546667, 0], [3, 0.186667, 0]], [-0.645772, [3, -0.186667, 0], [3, 0.12, 0]], [-0.637651, [3, -0.12, -0.00812118], [3, 0.146667, 0.00992588]], [-0.00399983, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[0.00681926, [3, -0.333333, 0], [3, 0.546667, 0]], [0.404916, [3, -0.546667, 0], [3, 0.186667, 0]], [0.26529, [3, -0.186667, 0], [3, 0.12, 0]], [0.26529, [3, -0.12, 0], [3, 0.146667, 0]], [0.0063641, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([1, 2.64, 3.56, 4])
keys.append([[-0.00982555, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.129121, [3, -0.546667, 0], [3, 0.306667, 0]], [-0.128653, [3, -0.306667, -0.000467426], [3, 0.146667, 0.000223552]], [-0.00674084, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[0.690812, [3, -0.333333, 0], [3, 0.546667, 0]], [0.125752, [3, -0.546667, 0.194642], [3, 0.186667, -0.0664631]], [-0.0925025, [3, -0.186667, 0], [3, 0.12, 0]], [-0.0923279, [3, -0.12, -0.000174537], [3, 0.146667, 0.000213323]], [-0.00482005, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[1.39188, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.09607, [3, -0.333333, 0], [3, 0.213333, 0]], [-1.03322, [3, -0.213333, -0.00359541], [3, 0.306667, 0.0051684]], [-1.02805, [3, -0.306667, -0.0051684], [3, 0.146667, 0.00247184]], [-0.00291505, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[0.29138, [3, -0.333333, 0], [3, 0.333333, 0]], [0.614356, [3, -0.333333, 0], [3, 0.213333, 0]], [0.0432735, [3, -0.213333, 0], [3, 0.306667, 0]], [0.061081, [3, -0.306667, 0], [3, 0.146667, 0]], [0.015445, [3, -0.146667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[0.00274344, [3, -0.333333, 0], [3, 0.333333, 0]], [1.82387, [3, -0.333333, 0], [3, 0.213333, 0]], [0.00590327, [3, -0.213333, 0], [3, 0.306667, 0]], [0.0139843, [3, -0.306667, 0], [3, 0.146667, 0]], [0.00383163, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([1, 2.64, 3.56, 4])
keys.append([[-0.345367, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.0100391, [3, -0.546667, 0], [3, 0.306667, 0]], [-0.0151623, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.00513536, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([1, 2.64, 3.56, 4])
keys.append([[-0.00846398, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.0920407, [3, -0.546667, 1.18684e-07], [3, 0.306667, -6.6579e-08]], [-0.0920408, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.00480506, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([1, 2.64, 3.56, 4])
keys.append([[0.0380824, [3, -0.333333, 0], [3, 0.546667, 0]], [0.040937, [3, -0.546667, 0], [3, 0.306667, 0]], [0.040937, [3, -0.306667, 0], [3, 0.146667, 0]], [0.040937, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-1.45488, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.1589, [3, -0.333333, -0.295814], [3, 0.213333, 0.189321]], [0.000523736, [3, -0.213333, 0], [3, 0.306667, 0]], [-0.00429048, [3, -0.306667, 0], [3, 0.146667, 0]], [0.00667395, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[0.29, [3, -0.333333, 0], [3, 0.333333, 0]], [0.29, [3, -0.333333, 0], [3, 0.213333, 0]], [0.0030505, [3, -0.213333, 0], [3, 0.306667, 0]], [0.0101437, [3, -0.306667, 0], [3, 0.146667, 0]], [7.31791e-05, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[-0.45, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.212058, [3, -0.546667, -0.0281125], [3, 0.186667, 0.00959938]], [-0.202458, [3, -0.186667, 0], [3, 0.12, 0]], [-0.202458, [3, -0.12, 0], [3, 0.146667, 0]], [0, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[0, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.397612, [3, -0.546667, 0], [3, 0.186667, 0]], [0.378736, [3, -0.186667, 0], [3, 0.12, 0]], [0.378736, [3, -0.12, 0], [3, 0.146667, 0]], [0.00908558, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[-0.00982555, [3, -0.333333, 0], [3, 0.546667, 0]], [-0.129121, [3, -0.546667, 0], [3, 0.186667, 0]], [-0.00872665, [3, -0.186667, 0], [3, 0.12, 0]], [-0.128653, [3, -0.12, 0], [3, 0.146667, 0]], [-0.00674084, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([1, 2.64, 3.2, 3.56, 4])
keys.append([[0.7, [3, -0.333333, 0], [3, 0.546667, 0]], [0.012135, [3, -0.546667, 0], [3, 0.186667, 0]], [0.514872, [3, -0.186667, 0], [3, 0.12, 0]], [0.514872, [3, -0.12, 0], [3, 0.146667, 0]], [0, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-1.64388, [3, -0.333333, 0], [3, 0.333333, 0]], [0.734784, [3, -0.333333, 0], [3, 0.213333, 0]], [-2.08462, [3, -0.213333, 0.000452228], [3, 0.306667, -0.000650078]], [-2.08527, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.00258682, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[-0.740672, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.226893, [3, -0.333333, -0.14189], [3, 0.213333, 0.0908098]], [-0.0425714, [3, -0.213333, 0], [3, 0.306667, 0]], [-0.0643351, [3, -0.306667, 0], [3, 0.146667, 0]], [-0.0166073, [3, -0.146667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([1, 2, 2.64, 3.56, 4])
keys.append([[0.458084, [3, -0.333333, 0], [3, 0.333333, 0]], [1.82387, [3, -0.333333, 0], [3, 0.213333, 0]], [0.0114387, [3, -0.213333, 0], [3, 0.306667, 0]], [0.0194954, [3, -0.306667, 0], [3, 0.146667, 0]], [0.00947571, [3, -0.146667, 0], [3, 0, 0]]])

def main(IP , port):
  try:
    # uncomment the following line and modify the IP if you use this script outside Choregraphe.
    motion = ALProxy("ALMotion", IP, port)
    #motion = ALProxy("ALMotion")
    motion.angleInterpolationBezier(names, times, keys)
  except BaseException, err:
    print err
